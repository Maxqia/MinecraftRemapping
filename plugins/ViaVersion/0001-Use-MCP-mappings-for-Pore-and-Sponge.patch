From e3417890c52aee9bcc15aae65cc1c071dedfdd32 Mon Sep 17 00:00:00 2001
From: Max Qian <public@maxqia.com>
Date: Thu, 4 Aug 2016 17:41:53 -0700
Subject: [PATCH] Use MCP mappings for Pore and Sponge IT
 W!@#OJSOKAORrKKS!?#!?!?@!?

---
 .../bukkit/platform/BukkitViaInjector.java           | 16 ++++++++--------
 .../providers/BukkitViaBulkChunkTranslator.java      | 20 ++++++++++----------
 .../providers/BukkitViaMovementTransmitter.java      |  4 ++--
 .../us/myles/ViaVersion/bukkit/util/NMSUtil.java     | 11 ++++++-----
 4 files changed, 26 insertions(+), 25 deletions(-)

diff --git a/bukkit/src/main/java/us/myles/ViaVersion/bukkit/platform/BukkitViaInjector.java b/bukkit/src/main/java/us/myles/ViaVersion/bukkit/platform/BukkitViaInjector.java
index ef06a64..5554b94 100644
--- a/bukkit/src/main/java/us/myles/ViaVersion/bukkit/platform/BukkitViaInjector.java
+++ b/bukkit/src/main/java/us/myles/ViaVersion/bukkit/platform/BukkitViaInjector.java
@@ -129,14 +129,14 @@ public class BukkitViaInjector implements ViaInjector {
     @Override
     public int getServerProtocolVersion() throws Exception {
         try {
-            Class<?> serverClazz = NMSUtil.nms("MinecraftServer");
-            Object server = ReflectionUtil.invokeStatic(serverClazz, "getServer");
-            Class<?> pingClazz = NMSUtil.nms("ServerPing");
+            Class<?> serverClazz = NMSUtil.nms("server.MinecraftServer");
+            Object server = ReflectionUtil.invokeStatic(serverClazz, "func_71276_C"); //getServer
+            Class<?> pingClazz = NMSUtil.nms("network.ServerStatusResponse"); //ServerPing
             Object ping = null;
             // Search for ping method
             for (Field f : serverClazz.getDeclaredFields()) {
                 if (f.getType() != null) {
-                    if (f.getType().getSimpleName().equals("ServerPing")) {
+                    if (f.getType().getSimpleName().equals("ServerStatusResponse")) { //ServerPing
                         f.setAccessible(true);
                         ping = f.get(server);
                     }
@@ -146,7 +146,7 @@ public class BukkitViaInjector implements ViaInjector {
                 Object serverData = null;
                 for (Field f : pingClazz.getDeclaredFields()) {
                     if (f.getType() != null) {
-                        if (f.getType().getSimpleName().endsWith("ServerData")) {
+                        if (f.getType().getSimpleName().endsWith("MinecraftProtocolVersionIdentifier")) { //ServerData
                             f.setAccessible(true);
                             serverData = f.get(ping);
                         }
@@ -184,12 +184,12 @@ public class BukkitViaInjector implements ViaInjector {
     }
 
     public static Object getServerConnection() throws Exception {
-        Class<?> serverClazz = NMSUtil.nms("MinecraftServer");
-        Object server = ReflectionUtil.invokeStatic(serverClazz, "getServer");
+        Class<?> serverClazz = NMSUtil.nms("server.MinecraftServer");
+        Object server = ReflectionUtil.invokeStatic(serverClazz, "func_71276_C"); //getServer
         Object connection = null;
         for (Method m : serverClazz.getDeclaredMethods()) {
             if (m.getReturnType() != null) {
-                if (m.getReturnType().getSimpleName().equals("ServerConnection")) {
+                if (m.getReturnType().getSimpleName().equals("NetworkSystem")) { //ServerConnection
                     if (m.getParameterTypes().length == 0) {
                         connection = m.invoke(server);
                     }
diff --git a/bukkit/src/main/java/us/myles/ViaVersion/bukkit/providers/BukkitViaBulkChunkTranslator.java b/bukkit/src/main/java/us/myles/ViaVersion/bukkit/providers/BukkitViaBulkChunkTranslator.java
index fd4a3a2..80bfb43 100644
--- a/bukkit/src/main/java/us/myles/ViaVersion/bukkit/providers/BukkitViaBulkChunkTranslator.java
+++ b/bukkit/src/main/java/us/myles/ViaVersion/bukkit/providers/BukkitViaBulkChunkTranslator.java
@@ -20,8 +20,8 @@ public class BukkitViaBulkChunkTranslator extends BulkChunkTranslatorProvider {
 
     static {
         try {
-            mapChunkBulkRef = new ReflectionUtil.ClassReflection(NMSUtil.nms("PacketPlayOutMapChunkBulk"));
-            mapChunkRef = new ReflectionUtil.ClassReflection(NMSUtil.nms("PacketPlayOutMapChunk"));
+            mapChunkBulkRef = new ReflectionUtil.ClassReflection(NMSUtil.nms("network.play.server.S26PacketMapChunkBulk")); //PacketPlayOutMapChunkBulk
+            mapChunkRef = new ReflectionUtil.ClassReflection(NMSUtil.nms("network.play.server.S21PacketChunkData")); //PacketPlayOutMapChunk
             if (((ViaVersionPlugin) Via.getPlatform()).isSpigot()) {
                 obfuscateRef = Class.forName("org.spigotmc.AntiXray").getMethod("obfuscate", int.class, int.class, int.class, byte[].class, NMSUtil.nms("World"));
             }
@@ -36,9 +36,9 @@ public class BukkitViaBulkChunkTranslator extends BulkChunkTranslatorProvider {
     public List<Object> transformMapChunkBulk(Object packet, ClientChunks clientChunks) {
         List<Object> list = Lists.newArrayList();
         try {
-            int[] xcoords = mapChunkBulkRef.getFieldValue("a", packet, int[].class);
-            int[] zcoords = mapChunkBulkRef.getFieldValue("b", packet, int[].class);
-            Object[] chunkMaps = mapChunkBulkRef.getFieldValue("c", packet, Object[].class);
+            int[] xcoords = mapChunkBulkRef.getFieldValue("field_149266_a", packet, int[].class); //a
+            int[] zcoords = mapChunkBulkRef.getFieldValue("field_149264_b", packet, int[].class); //b
+            Object[] chunkMaps = mapChunkBulkRef.getFieldValue("field_179755_c", packet, Object[].class); //c
 
             if (Via.getConfig().isAntiXRay() && ((ViaVersionPlugin) Via.getPlatform()).isSpigot()) { //Spigot anti-xray patch
                 try {
@@ -62,10 +62,10 @@ public class BukkitViaBulkChunkTranslator extends BulkChunkTranslatorProvider {
                 int z = zcoords[i];
                 Object chunkMap = chunkMaps[i];
                 Object chunkPacket = mapChunkRef.newInstance();
-                mapChunkRef.setFieldValue("a", chunkPacket, x);
-                mapChunkRef.setFieldValue("b", chunkPacket, z);
-                mapChunkRef.setFieldValue("c", chunkPacket, chunkMap);
-                mapChunkRef.setFieldValue("d", chunkPacket, true); // Chunk bulk chunks are always ground-up
+                mapChunkRef.setFieldValue("field_149284_a", chunkPacket, x); //a
+                mapChunkRef.setFieldValue("field_149282_b", chunkPacket, z); //b
+                mapChunkRef.setFieldValue("field_179758_c", chunkPacket, chunkMap); //c
+                mapChunkRef.setFieldValue("field_149279_g", chunkPacket, true); //d // Chunk bulk chunks are always ground-up
                 clientChunks.getBulkChunks().add(ClientChunks.toLong(x, z)); // Store for later
                 list.add(chunkPacket);
             }
@@ -77,7 +77,7 @@ public class BukkitViaBulkChunkTranslator extends BulkChunkTranslatorProvider {
 
     @Override
     public boolean isFiltered(Class<?> packetClass) {
-        return packetClass.getName().endsWith("PacketPlayOutMapChunkBulk");
+        return packetClass.getName().endsWith("S26PacketMapChunkBulk"); //PacketPlayOutMapChunkBulk
     }
 
     @Override
diff --git a/bukkit/src/main/java/us/myles/ViaVersion/bukkit/providers/BukkitViaMovementTransmitter.java b/bukkit/src/main/java/us/myles/ViaVersion/bukkit/providers/BukkitViaMovementTransmitter.java
index 4c9147d..115d517 100644
--- a/bukkit/src/main/java/us/myles/ViaVersion/bukkit/providers/BukkitViaMovementTransmitter.java
+++ b/bukkit/src/main/java/us/myles/ViaVersion/bukkit/providers/BukkitViaMovementTransmitter.java
@@ -28,7 +28,7 @@ public class BukkitViaMovementTransmitter extends MovementTransmitterProvider {
 
         Class<?> idlePacketClass;
         try {
-            idlePacketClass = NMSUtil.nms("PacketPlayInFlying");
+            idlePacketClass = NMSUtil.nms("network.play.client.C03PacketPlayer"); //PacketPlayInFlying
         } catch (ClassNotFoundException e) {
             return; // We'll hope this is 1.9.4+
         }
@@ -36,7 +36,7 @@ public class BukkitViaMovementTransmitter extends MovementTransmitterProvider {
             idlePacket = idlePacketClass.newInstance();
             idlePacket2 = idlePacketClass.newInstance();
 
-            Field flying = idlePacketClass.getDeclaredField("f");
+            Field flying = idlePacketClass.getDeclaredField("field_149474_g"); //f
             flying.setAccessible(true);
 
             flying.set(idlePacket2, true);
diff --git a/bukkit/src/main/java/us/myles/ViaVersion/bukkit/util/NMSUtil.java b/bukkit/src/main/java/us/myles/ViaVersion/bukkit/util/NMSUtil.java
index d01884e..bcaf2a7 100644
--- a/bukkit/src/main/java/us/myles/ViaVersion/bukkit/util/NMSUtil.java
+++ b/bukkit/src/main/java/us/myles/ViaVersion/bukkit/util/NMSUtil.java
@@ -1,20 +1,21 @@
 package us.myles.ViaVersion.bukkit.util;
 
+import org.apache.commons.lang.NotImplementedException;
 import org.bukkit.Bukkit;
 
 public class NMSUtil {
-    private static String BASE = Bukkit.getServer().getClass().getPackage().getName();
-    private static String NMS = BASE.replace("org.bukkit.craftbukkit", "net.minecraft.server");
+    //private static String BASE = Bukkit.getServer().getClass().getPackage().getName();
+    //private static String NMS = BASE.replace("org.bukkit.craftbukkit", "net.minecraft.server");
 
     public static Class<?> nms(String className) throws ClassNotFoundException {
-        return Class.forName(NMS + "." + className);
+        return Class.forName("net.minecraft." + className);
     }
 
     public static Class<?> obc(String className) throws ClassNotFoundException {
-        return Class.forName(BASE + "." + className);
+        throw new NotImplementedException("CANTFIX");
     }
 
     public static String getVersion() {
-        return BASE.substring(BASE.lastIndexOf('.') + 1);
+        throw new NotImplementedException("CANTFIX");
     }
 }
-- 
2.10.0

